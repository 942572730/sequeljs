/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[16,17,35,36,46,47,48,64,65,99,106,107,108,109],$V2=[17,35,36,46,47,48,64,65,99,106,107,108,109],$V3=[1,28],$V4=[1,11],$V5=[1,12],$V6=[1,23],$V7=[1,24],$V8=[1,26],$V9=[1,17],$Va=[1,18],$Vb=[1,32],$Vc=[1,27],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[5,18,20,22,23,49],$Vh=[5,18,20,22,23,25,38,49],$Vi=[2,40],$Vj=[1,39],$Vk=[1,40],$Vl=[1,38],$Vm=[5,18,20,22,23,25,29,30,31,38,43,46,49,50,51,53,54,55,56,57,59,102,103,104,105],$Vn=[1,41],$Vo=[5,18,20,22,23,25,29,30,31,38,43,46,49,50,51,53,54,55,56,57,59,61,102,103,104,105],$Vp=[1,43],$Vq=[5,18,20,22,23,25,29,30,31,38,43,46,49,50,51,53,54,55,56,57,59,61,65,67,68,69,70,71,72,73,82,83,87,88,90,102,103,104,105],$Vr=[1,64],$Vs=[1,65],$Vt=[5,18,20,22,23,25,29,30,31,38,43,46,49,50,51,53,54,55,56,57,59,61,65,67,68,69,70,71,72,73,82,83,87,88,90,92,93,102,103,104,105],$Vu=[1,67],$Vv=[1,66],$Vw=[1,68],$Vx=[5,18,20,22,23,25,29,30,31,35,38,43,46,49,50,51,53,54,55,56,57,59,61,65,67,68,69,70,71,72,73,82,83,87,88,90,92,93,95,96,102,103,104,105],$Vy=[5,20,22,23,49],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[5,18,20,22,23,25,38,43,44,49,51,53,54,55,56,57],$VD=[17,46,47,48,79,80,81,99,106,107,108,109],$VE=[1,111],$VF=[1,112],$VG=[2,91],$VH=[5,22,23,49],$VI=[5,18,20,22,23,25,49],$VJ=[2,43],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[5,18,20,22,23,25,43,49,51,53,54,55,56,57],$VR=[5,18,20,22,23,25,43,44,49,51,53,54,55,56,57],$VS=[5,18,20,22,23,25,43,44,46,49,50,51,53,54,55,56,57],$VT=[25,49],$VU=[5,23,49],$VV=[1,168],$VW=[5,22,23,25,49],$VX=[5,49],$VY=[102,103,105],$VZ=[5,25,49],$V_=[5,25,31,49];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinctClause":7,"optTopClause":8,"selectExprList":9,"optTableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"DISTINCT":15,"TOP":16,"NUMERIC":17,"WHERE":18,"expression":19,"GROUP_BY":20,"commaSepExpressionList":21,"HAVING":22,"ORDER_BY":23,"orderByList":24,"COMMA":25,"orderByListItem":26,"optOrderByOrder":27,"optOrderByNulls":28,"ASC":29,"DESC":30,"NULLS":31,"FIRST":32,"LAST":33,"selectExpr":34,"STAR":35,"QUALIFIED_STAR":36,"optTableExprAlias":37,"FROM":38,"tableExprList":39,"tableExpr":40,"joinComponent":41,"optJoinModifier":42,"JOIN":43,"ON":44,"tableExprPart":45,"IDENTIFIER":46,"QUALIFIED_IDENTIFIER":47,"LPAREN":48,"RPAREN":49,"AS":50,"LEFT":51,"OUTER":52,"RIGHT":53,"FULL":54,"INNER":55,"CROSS":56,"NATURAL":57,"andCondition":58,"LOGICAL_OR":59,"condition":60,"LOGICAL_AND":61,"operand":62,"conditionRightHandSide":63,"EXISTS":64,"LOGICAL_NOT":65,"compare":66,"CMP_EQUALS":67,"CMP_NOTEQUALS":68,"CMP_NOTEQUALS_BASIC":69,"CMP_GREATER":70,"CMP_GREATEROREQUAL":71,"CMP_LESS":72,"CMP_LESSOREQUAL":73,"rhsCompareTest":74,"rhsIsTest":75,"rhsInTest":76,"rhsLikeTest":77,"rhsBetweenTest":78,"ALL":79,"ANY":80,"SOME":81,"IS":82,"IN":83,"functionParam":84,"functionExpressionList":85,"optFunctionExpressionList":86,"LIKE":87,"BETWEEN":88,"summand":89,"CONCAT":90,"factor":91,"PLUS":92,"MINUS":93,"term":94,"DIVIDE":95,"MODULO":96,"value":97,"caseWhen":98,"CASE":99,"caseWhenList":100,"optCaseWhenElse":101,"END":102,"WHEN":103,"THEN":104,"ELSE":105,"STRING":106,"BOOLEAN":107,"NULL":108,"BIND":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",15:"DISTINCT",16:"TOP",17:"NUMERIC",18:"WHERE",20:"GROUP_BY",22:"HAVING",23:"ORDER_BY",25:"COMMA",29:"ASC",30:"DESC",31:"NULLS",32:"FIRST",33:"LAST",35:"STAR",36:"QUALIFIED_STAR",38:"FROM",43:"JOIN",44:"ON",46:"IDENTIFIER",47:"QUALIFIED_IDENTIFIER",48:"LPAREN",49:"RPAREN",50:"AS",51:"LEFT",52:"OUTER",53:"RIGHT",54:"FULL",55:"INNER",56:"CROSS",57:"NATURAL",59:"LOGICAL_OR",61:"LOGICAL_AND",64:"EXISTS",65:"LOGICAL_NOT",67:"CMP_EQUALS",68:"CMP_NOTEQUALS",69:"CMP_NOTEQUALS_BASIC",70:"CMP_GREATER",71:"CMP_GREATEROREQUAL",72:"CMP_LESS",73:"CMP_LESSOREQUAL",79:"ALL",80:"ANY",81:"SOME",82:"IS",83:"IN",87:"LIKE",88:"BETWEEN",90:"CONCAT",92:"PLUS",93:"MINUS",95:"DIVIDE",96:"MODULO",99:"CASE",102:"END",103:"WHEN",104:"THEN",105:"ELSE",106:"STRING",107:"BOOLEAN",108:"NULL",109:"BIND"},
productions_: [0,[3,2],[4,9],[7,0],[7,1],[8,0],[8,2],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[14,0],[14,2],[24,3],[24,1],[26,3],[27,0],[27,1],[27,1],[28,0],[28,2],[28,2],[9,1],[9,3],[34,1],[34,1],[34,2],[10,0],[10,2],[39,1],[39,3],[40,1],[40,4],[40,6],[41,2],[45,1],[45,1],[45,3],[37,0],[37,1],[37,2],[42,0],[42,1],[42,2],[42,1],[42,2],[42,1],[42,1],[42,1],[42,1],[19,1],[19,3],[58,1],[58,3],[60,1],[60,2],[60,4],[60,2],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[63,1],[63,1],[63,1],[63,1],[63,1],[74,2],[74,5],[74,5],[74,5],[75,2],[75,3],[75,4],[75,5],[76,4],[76,5],[76,4],[76,5],[21,3],[21,1],[84,1],[84,1],[84,1],[85,3],[85,1],[86,0],[86,1],[77,2],[77,3],[78,4],[78,5],[62,1],[62,3],[89,1],[89,3],[89,3],[91,1],[91,3],[91,3],[91,3],[94,1],[94,1],[94,1],[94,1],[94,3],[94,4],[94,4],[98,4],[100,5],[100,4],[101,0],[101,2],[97,1],[97,1],[97,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 this.$ = {nodeType: 'Select', distinct: $$[$0-7], top: $$[$0-6], columns: $$[$0-5], from: $$[$0-4], where:$$[$0-3], groupBy:$$[$0-2], having:$$[$0-1], orderBy:$$[$0]}; 
break;
case 3:
 this.$ = false; 
break;
case 4:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 13: case 40: case 91: case 116:
 this.$ = null; 
break;
case 6: case 8: case 10: case 12: case 14: case 19: case 20: case 30: case 37: case 38: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 86: case 87: case 88: case 92: case 97: case 99: case 102: case 109: case 117: case 118: case 119: case 120: case 121: case 122:
 this.$ = $$[$0]; 
break;
case 15: case 25: case 32: case 55: case 84: case 89:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 16: case 24: case 31: case 54: case 85: case 90:
 this.$ = [$$[$0]]; 
break;
case 17:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 18: case 43:
 this.$ = ''; 
break;
case 21:
 this.$ = '';
break;
case 22:
 this.$ = 'NULLS FIRST'; 
break;
case 23:
 this.$ = 'NULLS LAST'; 
break;
case 26:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 27:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 28:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 29:
 this.$ = []; 
break;
case 33:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 34:
 this.$ = $$[$0-3]; $$[$0-3].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 35:
 this.$ = $$[$0-5]; $$[$0-5].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-4], expression:$$[$0]}); 
break;
case 36:
 this.$ = {exprName: $$[$0-1], alias: $$[$0]}; 
break;
case 39:
 this.$ = $$[$0-1]; 
break;
case 41:
 this.$ = {value: $$[$0] }; 
break;
case 42:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 44:
 this.$ = 'LEFT'; 
break;
case 45:
 this.$ = 'LEFT OUTER'; 
break;
case 46:
 this.$ = 'RIGHT'; 
break;
case 47:
 this.$ = 'RIGHT OUTER'; 
break;
case 48:
 this.$ = 'FULL'; 
break;
case 49:
 this.$ = 'INNER'; 
break;
case 50:
 this.$ = 'CROSS'; 
break;
case 51:
 this.$ = 'NATURAL'; 
break;
case 52:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 53:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 56:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 57:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 58:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 59:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 72:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 73: case 74: case 75:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 76:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 77:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 78:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 79:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 80:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 81:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 82:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 83:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 93:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 94:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 95:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 96:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 98:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 100: case 101:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 103: case 104: case 105:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 106: case 107: case 108:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 110:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 111: case 112:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 113:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 114:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 115:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,15:[1,6]}),{1:[2,1]},o($V2,[2,5],{8:7,16:[1,8]}),o($V1,[2,4]),{9:9,17:$V3,19:13,34:10,35:$V4,36:$V5,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:[1,33]},o($Vg,[2,29],{10:34,25:[1,35],38:[1,36]}),o($Vh,[2,24]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,$Vi,{37:37,46:$Vj,50:$Vk,59:$Vl}),o($Vm,[2,52],{61:$Vn}),o($Vo,[2,54]),o($Vo,[2,56],{63:42,74:44,75:45,76:46,77:47,78:48,66:49,65:[1,52],67:[1,55],68:[1,56],69:[1,57],70:[1,58],71:[1,59],72:[1,60],73:[1,61],82:[1,50],83:[1,51],87:[1,53],88:[1,54],90:$Vp}),{48:[1,62]},{17:$V3,46:$V6,47:$V7,48:$V8,60:63,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vq,[2,97],{92:$Vr,93:$Vs}),o($Vt,[2,99],{35:$Vu,95:$Vv,96:$Vw}),o($Vx,[2,102]),o($Vx,[2,106]),o($Vx,[2,107],{48:[1,69]}),o($Vx,[2,108],{48:[1,70]}),o($Vx,[2,109]),{17:$V3,19:71,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vx,[2,118]),o($Vx,[2,119]),o($Vx,[2,120]),o($Vx,[2,121]),o($Vx,[2,122]),{100:72,103:[1,73]},o($V2,[2,6]),o($Vy,[2,7],{11:74,18:[1,75]}),{17:$V3,19:13,34:76,35:$V4,36:$V5,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{39:77,40:78,41:79,45:80,46:$Vz,47:$VA,48:$VB},o($Vh,[2,28]),{17:$V3,46:$V6,47:$V7,48:$V8,58:84,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VC,[2,41]),{46:[1,85]},{17:$V3,46:$V6,47:$V7,48:$V8,60:86,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,57]),{17:$V3,46:$V6,47:$V7,48:$V8,89:87,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,67]),o($Vo,[2,68]),o($Vo,[2,69]),o($Vo,[2,70]),o($Vo,[2,71]),{17:$V3,46:$V6,47:$V7,48:$V8,62:88,79:[1,89],80:[1,90],81:[1,91],89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{15:[1,94],17:$V3,46:$V6,47:$V7,48:$V8,62:92,65:[1,93],89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{48:[1,95]},{83:[1,96],87:[1,97],88:[1,98]},{17:$V3,46:$V6,47:$V7,48:$V8,62:99,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,62:100,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),o($VD,[2,66]),{4:101,6:$V0},o($Vo,[2,59]),{17:$V3,46:$V6,47:$V7,48:$V8,91:102,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,91:103,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,94:104,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,94:105,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,94:106,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,19:110,35:$VE,36:$VF,46:$V6,47:$V7,48:$V8,49:$VG,58:14,60:15,62:16,64:$V9,65:$Va,84:109,85:108,86:107,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,19:110,35:$VE,36:$VF,46:$V6,47:$V7,48:$V8,49:$VG,58:14,60:15,62:16,64:$V9,65:$Va,84:109,85:108,86:113,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{49:[1,114],59:$Vl},{101:115,102:[2,116],103:[1,116],105:[1,117]},{17:$V3,19:118,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VH,[2,9],{12:119,20:[1,120]}),{17:$V3,19:121,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vh,[2,25]),o($Vg,[2,30],{25:[1,122]}),o($VI,[2,31],{42:123,43:$VJ,51:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP}),o($VQ,[2,33]),o($VR,$Vi,{37:130,46:$Vj,50:$Vk}),o($VS,[2,37]),o($VS,[2,38]),{4:131,6:$V0},o($Vm,[2,53],{61:$Vn}),o($VC,[2,42]),o($Vo,[2,55]),o($Vq,[2,98],{92:$Vr,93:$Vs}),o($Vo,[2,72],{90:$Vp}),{48:[1,132]},{48:[1,133]},{48:[1,134]},o($Vo,[2,76],{90:$Vp}),{15:[1,136],17:$V3,46:$V6,47:$V7,48:$V8,62:135,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{38:[1,137]},{4:138,6:$V0,17:$V3,19:140,21:139,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{48:[1,141]},{17:$V3,46:$V6,47:$V7,48:$V8,62:142,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,46:$V6,47:$V7,48:$V8,62:143,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,93],{90:$Vp}),{61:[1,144],90:$Vp},{49:[1,145]},o($Vt,[2,100],{35:$Vu,95:$Vv,96:$Vw}),o($Vt,[2,101],{35:$Vu,95:$Vv,96:$Vw}),o($Vx,[2,103]),o($Vx,[2,104]),o($Vx,[2,105]),{49:[1,146]},{25:[1,147],49:[2,92]},o($VT,[2,90]),o($VT,[2,86],{59:$Vl}),o($VT,[2,87]),o($VT,[2,88]),{49:[1,148]},o($Vx,[2,110]),{102:[1,149]},{17:$V3,19:150,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,19:151,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{59:$Vl,104:[1,152]},o($VU,[2,11],{13:153,22:[1,154]}),{17:$V3,19:140,21:155,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vy,[2,8],{59:$Vl}),{40:156,41:79,45:80,46:$Vz,47:$VA,48:$VB},{43:[1,157]},{43:[2,44],52:[1,158]},{43:[2,46],52:[1,159]},{43:[2,48]},{43:[2,49]},{43:[2,50]},{43:[2,51]},o($VR,[2,36]),{49:[1,160]},{4:161,6:$V0},{4:162,6:$V0},{4:163,6:$V0},o($Vo,[2,77],{90:$Vp}),{38:[1,164]},{17:$V3,46:$V6,47:$V7,48:$V8,62:165,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{49:[1,166]},{25:$VV,49:[1,167]},o($VW,[2,85],{59:$Vl}),{4:169,6:$V0,17:$V3,19:140,21:170,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,94],{90:$Vp}),{61:[1,171],90:$Vp},{17:$V3,46:$V6,47:$V7,48:$V8,62:172,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,58]),o($Vx,[2,111]),{17:$V3,19:110,35:$VE,36:$VF,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,84:173,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vx,[2,112]),o($Vx,[2,113]),{59:$Vl,104:[1,174]},{59:$Vl,102:[2,117]},{17:$V3,19:175,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VX,[2,13],{14:176,23:[1,177]}),{17:$V3,19:178,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VH,[2,10],{25:$VV}),o($VI,[2,32],{42:123,43:$VJ,51:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP}),{41:179,45:80,46:$Vz,47:$VA,48:$VB},{43:[2,45]},{43:[2,47]},o($VS,[2,39]),{49:[1,180]},{49:[1,181]},{49:[1,182]},{17:$V3,46:$V6,47:$V7,48:$V8,62:183,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,78],{90:$Vp}),o($Vo,[2,80]),o($Vo,[2,82]),{17:$V3,19:184,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{49:[1,185]},{25:$VV,49:[1,186]},{17:$V3,46:$V6,47:$V7,48:$V8,62:187,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($Vo,[2,95],{90:$Vp}),o($VT,[2,89]),{17:$V3,19:188,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VY,[2,115],{59:$Vl}),o($VX,[2,2]),{17:$V3,19:191,24:189,26:190,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VU,[2,12],{59:$Vl}),o($VQ,[2,34],{44:[1,192]}),o($Vo,[2,73]),o($Vo,[2,74]),o($Vo,[2,75]),o($Vo,[2,79],{90:$Vp}),o($VW,[2,84],{59:$Vl}),o($Vo,[2,81]),o($Vo,[2,83]),o($Vo,[2,96],{90:$Vp}),o($VY,[2,114],{59:$Vl}),o($VX,[2,14],{25:[1,193]}),o($VZ,[2,16]),o($V_,[2,18],{27:194,29:[1,195],30:[1,196],59:$Vl}),{17:$V3,19:197,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},{17:$V3,19:191,26:198,46:$V6,47:$V7,48:$V8,58:14,60:15,62:16,64:$V9,65:$Va,89:19,91:20,94:21,97:22,98:25,99:$Vb,106:$Vc,107:$Vd,108:$Ve,109:$Vf},o($VZ,[2,21],{28:199,31:[1,200]}),o($V_,[2,19]),o($V_,[2,20]),o($VQ,[2,35],{59:$Vl}),o($VZ,[2,15]),o($VZ,[2,17]),{32:[1,201],33:[1,202]},o($VZ,[2,22]),o($VZ,[2,23])],
defaultActions: {4:[2,1],126:[2,48],127:[2,49],128:[2,50],129:[2,51],158:[2,45],159:[2,47]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 47
break;
case 2:return 36
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 16
break;
case 6:return 38
break;
case 7:return 18
break;
case 8:return 15
break;
case 9:return 88
break;
case 10:return 20
break;
case 11:return 22
break;
case 12:return 23
break;
case 13:return 25
break;
case 14:return 92
break;
case 15:return 93
break;
case 16:return 95
break;
case 17:return 35
break;
case 18:return 96
break;
case 19:return 67
break;
case 20:return 68
break;
case 21:return 69
break;
case 22:return 71
break;
case 23:return 70
break;
case 24:return 73
break;
case 25:return 72
break;
case 26:return 48
break;
case 27:return 49
break;
case 28:return 90
break;
case 29:return 50
break;
case 30:return 79
break;
case 31:return 80
break;
case 32:return 81
break;
case 33:return 64
break;
case 34:return 82
break;
case 35:return 83
break;
case 36:return 44
break;
case 37:return 61
break;
case 38:return 59
break;
case 39:return 65
break;
case 40:return 55
break;
case 41:return 52
break;
case 42:return 43
break;
case 43:return 51
break;
case 44:return 53
break;
case 45:return 54
break;
case 46:return 57
break;
case 47:return 56
break;
case 48:return 99
break;
case 49:return 103
break;
case 50:return 104
break;
case 51:return 105
break;
case 52:return 102
break;
case 53:return 87
break;
case 54:return 29
break;
case 55:return 30
break;
case 56:return 31
break;
case 57:return 32
break;
case 58:return 33
break;
case 59:return 106
break;
case 60:return 108
break;
case 61:return 107
break;
case 62:return 17
break;
case 63:return 46
break;
case 64:return 109
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*].*?[*][/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();