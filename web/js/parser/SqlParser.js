/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[17,18,36,40,42,43,54,71,72,106,109,116,117,118,119],$V2=[18,36,40,42,43,54,71,72,106,109,116,117,118,119],$V3=[1,29],$V4=[1,26],$V5=[1,23],$V6=[1,11],$V7=[1,12],$V8=[1,24],$V9=[1,17],$Va=[1,18],$Vb=[1,27],$Vc=[1,33],$Vd=[1,28],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[5,19,21,23,24,35,38],$Vi=[5,19,21,23,24,26,35,38,45],$Vj=[2,46],$Vk=[1,40],$Vl=[1,41],$Vm=[1,39],$Vn=[5,19,21,23,24,26,30,31,32,35,38,40,45,50,55,58,60,61,62,63,64,66,112,113,114,115],$Vo=[1,42],$Vp=[5,19,21,23,24,26,30,31,32,35,38,40,45,50,55,58,60,61,62,63,64,66,68,112,113,114,115],$Vq=[1,44],$Vr=[5,19,21,23,24,26,30,31,32,35,38,40,45,50,55,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,89,90,94,95,97,112,113,114,115],$Vs=[1,65],$Vt=[1,66],$Vu=[5,19,21,23,24,26,30,31,32,35,38,40,45,50,55,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,89,90,94,95,97,99,100,112,113,114,115],$Vv=[1,68],$Vw=[1,67],$Vx=[1,69],$Vy=[5,19,21,23,24,26,30,31,32,35,38,40,42,45,50,55,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,89,90,94,95,97,99,100,102,103,112,113,114,115],$Vz=[5,21,23,24,35,38],$VA=[1,86],$VB=[1,84],$VC=[1,85],$VD=[5,19,21,23,24,26,35,38,45,50,51,56,58,60,61,62,63,64],$VE=[18,36,40,54,86,87,88,106,109,116,117,118,119],$VF=[2,101],$VG=[1,114],$VH=[1,115],$VI=[5,23,24,35,38],$VJ=[5,19,21,23,24,26,35,38],$VK=[2,53],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[5,19,21,23,24,26,35,38,50,58,60,61,62,63,64],$VS=[5,19,21,23,24,26,35,38,40,50,51,55,56,58,60,61,62,63,64],$VT=[26,38],$VU=[5,24,35,38],$VV=[5,19,21,23,24,26,35,38,50,51,58,60,61,62,63,64],$VW=[1,176],$VX=[5,23,24,26,35,38],$VY=[5,35,38],$VZ=[112,113,115],$V_=[5,38],$V$=[5,26,35,38],$V01=[5,26,32,35,38],$V11=[1,223],$V21=[1,230],$V31=[26,38,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinctClause":7,"optTopClause":8,"selectExprList":9,"optTableExprList":10,"optWhereClause":11,"optGroupByClause":12,"optHavingClause":13,"optOrderByClause":14,"optQueryHintsClause":15,"DISTINCT":16,"TOP":17,"NUMERIC":18,"WHERE":19,"expression":20,"GROUP_BY":21,"commaSepExpressionList":22,"HAVING":23,"ORDER_BY":24,"orderByList":25,"COMMA":26,"orderByListItem":27,"optOrderByOrder":28,"optOrderByNulls":29,"ASC":30,"DESC":31,"NULLS":32,"FIRST":33,"LAST":34,"OPTION":35,"LPAREN":36,"queryHintList":37,"RPAREN":38,"queryHint":39,"IDENTIFIER":40,"selectExpr":41,"STAR":42,"QUALIFIED_STAR":43,"optTableExprAlias":44,"FROM":45,"tableExprList":46,"tableExpr":47,"joinComponent":48,"optJoinModifier":49,"JOIN":50,"ON":51,"tableExprPart":52,"optTableHintsClause":53,"QUALIFIED_IDENTIFIER":54,"AS":55,"WITH":56,"tableHintList":57,"LEFT":58,"OUTER":59,"RIGHT":60,"FULL":61,"INNER":62,"CROSS":63,"NATURAL":64,"andCondition":65,"LOGICAL_OR":66,"condition":67,"LOGICAL_AND":68,"operand":69,"conditionRightHandSide":70,"EXISTS":71,"LOGICAL_NOT":72,"compare":73,"CMP_EQUALS":74,"CMP_NOTEQUALS":75,"CMP_NOTEQUALS_BASIC":76,"CMP_GREATER":77,"CMP_GREATEROREQUAL":78,"CMP_LESS":79,"CMP_LESSOREQUAL":80,"rhsCompareTest":81,"rhsIsTest":82,"rhsInTest":83,"rhsLikeTest":84,"rhsBetweenTest":85,"ALL":86,"ANY":87,"SOME":88,"IS":89,"IN":90,"functionParam":91,"functionExpressionList":92,"optFunctionExpressionList":93,"LIKE":94,"BETWEEN":95,"summand":96,"CONCAT":97,"factor":98,"PLUS":99,"MINUS":100,"term":101,"DIVIDE":102,"MODULO":103,"value":104,"caseWhen":105,"CAST":106,"dataType":107,"optDataTypeLength":108,"CASE":109,"caseWhenList":110,"optCaseWhenElse":111,"END":112,"WHEN":113,"THEN":114,"ELSE":115,"STRING":116,"BOOLEAN":117,"NULL":118,"BIND":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",16:"DISTINCT",17:"TOP",18:"NUMERIC",19:"WHERE",21:"GROUP_BY",23:"HAVING",24:"ORDER_BY",26:"COMMA",30:"ASC",31:"DESC",32:"NULLS",33:"FIRST",34:"LAST",35:"OPTION",36:"LPAREN",38:"RPAREN",40:"IDENTIFIER",42:"STAR",43:"QUALIFIED_STAR",45:"FROM",50:"JOIN",51:"ON",54:"QUALIFIED_IDENTIFIER",55:"AS",56:"WITH",58:"LEFT",59:"OUTER",60:"RIGHT",61:"FULL",62:"INNER",63:"CROSS",64:"NATURAL",66:"LOGICAL_OR",68:"LOGICAL_AND",71:"EXISTS",72:"LOGICAL_NOT",74:"CMP_EQUALS",75:"CMP_NOTEQUALS",76:"CMP_NOTEQUALS_BASIC",77:"CMP_GREATER",78:"CMP_GREATEROREQUAL",79:"CMP_LESS",80:"CMP_LESSOREQUAL",86:"ALL",87:"ANY",88:"SOME",89:"IS",90:"IN",94:"LIKE",95:"BETWEEN",97:"CONCAT",99:"PLUS",100:"MINUS",102:"DIVIDE",103:"MODULO",106:"CAST",109:"CASE",112:"END",113:"WHEN",114:"THEN",115:"ELSE",116:"STRING",117:"BOOLEAN",118:"NULL",119:"BIND"},
productions_: [0,[3,2],[4,10],[7,0],[7,1],[8,0],[8,2],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[14,0],[14,2],[25,3],[25,1],[27,3],[28,0],[28,1],[28,1],[29,0],[29,2],[29,2],[15,0],[15,4],[37,3],[37,1],[39,2],[39,1],[9,1],[9,3],[41,1],[41,1],[41,2],[10,0],[10,2],[46,1],[46,3],[47,1],[47,4],[47,6],[48,3],[52,1],[52,1],[52,3],[44,0],[44,1],[44,2],[53,0],[53,4],[57,3],[57,1],[49,0],[49,1],[49,2],[49,1],[49,2],[49,1],[49,1],[49,1],[49,1],[20,1],[20,3],[65,1],[65,3],[67,1],[67,2],[67,4],[67,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[70,1],[70,1],[70,1],[70,1],[70,1],[81,2],[81,5],[81,5],[81,5],[82,2],[82,3],[82,4],[82,5],[83,4],[83,5],[83,4],[83,5],[22,3],[22,1],[91,1],[91,1],[91,1],[92,3],[92,1],[93,0],[93,1],[84,2],[84,3],[85,4],[85,5],[69,1],[69,3],[96,1],[96,3],[96,3],[98,1],[98,3],[98,3],[98,3],[101,1],[101,1],[101,1],[101,1],[101,3],[101,4],[101,4],[101,6],[101,3],[107,2],[108,0],[108,3],[105,4],[110,5],[110,4],[111,0],[111,2],[104,1],[104,1],[104,1],[104,1],[104,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 this.$ = {nodeType: 'Select', distinct: $$[$0-8], top: $$[$0-7], columns: $$[$0-6], from: $$[$0-5], where:$$[$0-4], groupBy:$$[$0-3], having:$$[$0-2], orderBy:$$[$0-1], queryHints:$$[$0]}; 
break;
case 3:
 this.$ = false; 
break;
case 4:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 13: case 24: case 46: case 49: case 101: case 126: case 131:
 this.$ = null; 
break;
case 6: case 8: case 10: case 12: case 14: case 19: case 20: case 36: case 43: case 44: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 96: case 97: case 98: case 102: case 107: case 109: case 112: case 119: case 132: case 133: case 134: case 135: case 136: case 137:
 this.$ = $$[$0]; 
break;
case 15: case 26: case 31: case 38: case 51: case 65: case 94: case 99:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 16: case 27: case 29: case 30: case 37: case 52: case 64: case 95: case 100:
 this.$ = [$$[$0]]; 
break;
case 17:
 this.$ = {expression:$$[$0-2], orderByOrder: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 18: case 53:
 this.$ = ''; 
break;
case 21:
 this.$ = '';
break;
case 22:
 this.$ = 'NULLS FIRST'; 
break;
case 23:
 this.$ = 'NULLS LAST'; 
break;
case 25: case 45: case 50: case 127:
 this.$ = $$[$0-1]; 
break;
case 28:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 32:
 this.$ = {nodeType: 'Column', value:'*'}; 
break;
case 33:
 this.$ = {nodeType: 'Column', value:$$[$0]}; 
break;
case 34:
 this.$ = {nodeType: 'Column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 35:
 this.$ = []; 
break;
case 39:
 this.$ = {nodeType:'TableExpr', value: [$$[$0]]}; 
break;
case 40:
 this.$ = $$[$0-3]; $$[$0-3].value.push({nodeType:'TableExpr', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 41:
 this.$ = $$[$0-5]; $$[$0-5].value.push({nodeType:'TableExpr', value: $$[$0-2], modifier:$$[$0-4], expression:$$[$0]}); 
break;
case 42:
 this.$ = {exprName: $$[$0-2], alias: $$[$0-1], tableHints: $$[$0]}; 
break;
case 47:
 this.$ = {value: $$[$0] }; 
break;
case 48:
 this.$ = {value: $$[$0], includeAs: 1}; 
break;
case 54:
 this.$ = 'LEFT'; 
break;
case 55:
 this.$ = 'LEFT OUTER'; 
break;
case 56:
 this.$ = 'RIGHT'; 
break;
case 57:
 this.$ = 'RIGHT OUTER'; 
break;
case 58:
 this.$ = 'FULL'; 
break;
case 59:
 this.$ = 'INNER'; 
break;
case 60:
 this.$ = 'CROSS'; 
break;
case 61:
 this.$ = 'NATURAL'; 
break;
case 62:
 this.$ = {nodeType:'AndCondition', value: $$[$0]}; 
break;
case 63:
 this.$ = {nodeType:'OrCondition', left: $$[$0-2], right: $$[$0]}; 
break;
case 66:
 this.$ = {nodeType: 'Condition', value: $$[$0]}; 
break;
case 67:
 this.$ = {nodeType: 'BinaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 68:
 this.$ = {nodeType: 'ExistsCondition', value: $$[$0-1]}; 
break;
case 69:
 this.$ = {nodeType: 'NotCondition', value: $$[$0]}; 
break;
case 82:
 this.$ = {nodeType: 'RhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 83: case 84: case 85:
 this.$ = {nodeType: 'RhsCompareSub', op:$$[$0-4], kind: $$[$0-3], value: $$[$0-1] }; 
break;
case 86:
 this.$ = {nodeType: 'RhsIs', value: $$[$0]}; 
break;
case 87:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1}; 
break;
case 88:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 89:
 this.$ = {nodeType: 'RhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 90:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1] }; 
break;
case 91:
 this.$ = { nodeType: 'RhsInSelect', value: $$[$0-1], not:1 }; 
break;
case 92:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1] }; 
break;
case 93:
 this.$ = { nodeType: 'RhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 103:
 this.$ = {nodeType: 'RhsLike', value: $$[$0]}; 
break;
case 104:
 this.$ = {nodeType: 'RhsLike', value: $$[$0], not:1}; 
break;
case 105:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 106:
 this.$ = {nodeType: 'RhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 108:
 this.$ = {nodeType:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 110: case 111:
 this.$ = {nodeType:'Summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 113: case 114: case 115:
 this.$ = {nodeType:'Factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 116: case 117: case 118:
 this.$ = {nodeType: 'Term', value: $$[$0]}; 
break;
case 120:
 this.$ = {nodeType: 'Term', value: $$[$0-1]}; 
break;
case 121: case 122:
 this.$ = {nodeType: 'FunctionCall', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 123:
 this.$ = {nodeType: 'Cast', expression:$$[$0-3], dataType:$$[$0-1]}; 
break;
case 124:
 this.$ = {nodeType: 'Select', value:$$[$0-1]}; 
break;
case 125:
 this.$ = {name: $$[$0-1], len: $$[$0]}; 
break;
case 128:
 this.$ = {nodeType:'Case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 129:
 this.$ = $$[$0-4]; $$[$0-4].push({nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}); 
break;
case 130:
 this.$ = [{nodeType: 'CaseItem', when: $$[$0-2], then: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,16:[1,6]}),{1:[2,1]},o($V2,[2,5],{8:7,17:[1,8]}),o($V1,[2,4]),{9:9,18:$V3,20:13,36:$V4,40:$V5,41:10,42:$V6,43:$V7,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:[1,34]},o($Vh,[2,35],{10:35,26:[1,36],45:[1,37]}),o($Vi,[2,30]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,$Vj,{44:38,40:$Vk,55:$Vl,66:$Vm}),o($Vn,[2,62],{68:$Vo}),o($Vp,[2,64]),o($Vp,[2,66],{70:43,81:45,82:46,83:47,84:48,85:49,73:50,72:[1,53],74:[1,56],75:[1,57],76:[1,58],77:[1,59],78:[1,60],79:[1,61],80:[1,62],89:[1,51],90:[1,52],94:[1,54],95:[1,55],97:$Vq}),{36:[1,63]},{18:$V3,36:$V4,40:$V5,54:$V8,67:64,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vr,[2,107],{99:$Vs,100:$Vt}),o($Vu,[2,109],{42:$Vv,102:$Vw,103:$Vx}),o($Vy,[2,112]),o($Vy,[2,116]),o($Vy,[2,117],{36:[1,70]}),o($Vy,[2,118],{36:[1,71]}),o($Vy,[2,119]),{4:73,6:$V0,18:$V3,20:72,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{36:[1,74]},o($Vy,[2,133]),o($Vy,[2,134]),o($Vy,[2,135]),o($Vy,[2,136]),o($Vy,[2,137]),{110:75,113:[1,76]},o($V2,[2,6]),o($Vz,[2,7],{11:77,19:[1,78]}),{18:$V3,20:13,36:$V4,40:$V5,41:79,42:$V6,43:$V7,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{36:$VA,40:$VB,46:80,47:81,48:82,52:83,54:$VC},o($Vi,[2,34]),{18:$V3,36:$V4,40:$V5,54:$V8,65:87,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VD,[2,47]),{40:[1,88]},{18:$V3,36:$V4,40:$V5,54:$V8,67:89,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,67]),{18:$V3,36:$V4,40:$V5,54:$V8,96:90,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,77]),o($Vp,[2,78]),o($Vp,[2,79]),o($Vp,[2,80]),o($Vp,[2,81]),{18:$V3,36:$V4,40:$V5,54:$V8,69:91,86:[1,92],87:[1,93],88:[1,94],96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{16:[1,97],18:$V3,36:$V4,40:$V5,54:$V8,69:95,72:[1,96],96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{36:[1,98]},{90:[1,99],94:[1,100],95:[1,101]},{18:$V3,36:$V4,40:$V5,54:$V8,69:102,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,69:103,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VE,[2,70]),o($VE,[2,71]),o($VE,[2,72]),o($VE,[2,73]),o($VE,[2,74]),o($VE,[2,75]),o($VE,[2,76]),{4:104,6:$V0},o($Vp,[2,69]),{18:$V3,36:$V4,40:$V5,54:$V8,98:105,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,98:106,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,101:107,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,101:108,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,101:109,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,20:113,36:$V4,38:$VF,40:$V5,42:$VG,43:$VH,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,91:112,92:111,93:110,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,20:113,36:$V4,38:$VF,40:$V5,42:$VG,43:$VH,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,91:112,92:111,93:116,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{38:[1,117],66:$Vm},{38:[1,118]},{18:$V3,20:119,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{111:120,112:[2,131],113:[1,121],115:[1,122]},{18:$V3,20:123,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VI,[2,9],{12:124,21:[1,125]}),{18:$V3,20:126,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vi,[2,31]),o($Vh,[2,36],{26:[1,127]}),o($VJ,[2,37],{49:128,50:$VK,58:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VR,[2,39]),o([5,19,21,23,24,26,35,38,50,51,56,58,60,61,62,63,64],$Vj,{44:135,40:$Vk,55:$Vl}),o($VS,[2,43]),o($VS,[2,44]),{4:136,6:$V0},o($Vn,[2,63],{68:$Vo}),o($VD,[2,48]),o($Vp,[2,65]),o($Vr,[2,108],{99:$Vs,100:$Vt}),o($Vp,[2,82],{97:$Vq}),{36:[1,137]},{36:[1,138]},{36:[1,139]},o($Vp,[2,86],{97:$Vq}),{16:[1,141],18:$V3,36:$V4,40:$V5,54:$V8,69:140,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{45:[1,142]},{4:143,6:$V0,18:$V3,20:145,22:144,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{36:[1,146]},{18:$V3,36:$V4,40:$V5,54:$V8,69:147,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,36:$V4,40:$V5,54:$V8,69:148,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,103],{97:$Vq}),{68:[1,149],97:$Vq},{38:[1,150]},o($Vu,[2,110],{42:$Vv,102:$Vw,103:$Vx}),o($Vu,[2,111],{42:$Vv,102:$Vw,103:$Vx}),o($Vy,[2,113]),o($Vy,[2,114]),o($Vy,[2,115]),{38:[1,151]},{26:[1,152],38:[2,102]},o($VT,[2,100]),o($VT,[2,96],{66:$Vm}),o($VT,[2,97]),o($VT,[2,98]),{38:[1,153]},o($Vy,[2,120]),o($Vy,[2,124]),{55:[1,154],66:$Vm},{112:[1,155]},{18:$V3,20:156,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{18:$V3,20:157,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{66:$Vm,114:[1,158]},o($VU,[2,11],{13:159,23:[1,160]}),{18:$V3,20:145,22:161,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vz,[2,8],{66:$Vm}),{36:$VA,40:$VB,47:162,48:82,52:83,54:$VC},{50:[1,163]},{50:[2,54],59:[1,164]},{50:[2,56],59:[1,165]},{50:[2,58]},{50:[2,59]},{50:[2,60]},{50:[2,61]},o($VV,[2,49],{53:166,56:[1,167]}),{38:[1,168]},{4:169,6:$V0},{4:170,6:$V0},{4:171,6:$V0},o($Vp,[2,87],{97:$Vq}),{45:[1,172]},{18:$V3,36:$V4,40:$V5,54:$V8,69:173,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{38:[1,174]},{26:$VW,38:[1,175]},o($VX,[2,95],{66:$Vm}),{4:177,6:$V0,18:$V3,20:145,22:178,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,104],{97:$Vq}),{68:[1,179],97:$Vq},{18:$V3,36:$V4,40:$V5,54:$V8,69:180,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,68]),o($Vy,[2,121]),{18:$V3,20:113,36:$V4,40:$V5,42:$VG,43:$VH,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,91:181,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vy,[2,122]),{40:[1,183],107:182},o($Vy,[2,128]),{66:$Vm,114:[1,184]},{66:$Vm,112:[2,132]},{18:$V3,20:185,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VY,[2,13],{14:186,24:[1,187]}),{18:$V3,20:188,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VI,[2,10],{26:$VW}),o($VJ,[2,38],{49:128,50:$VK,58:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),{36:$VA,40:$VB,48:189,52:83,54:$VC},{50:[2,55]},{50:[2,57]},o($VV,[2,42]),{36:[1,190]},o($VS,[2,45]),{38:[1,191]},{38:[1,192]},{38:[1,193]},{18:$V3,36:$V4,40:$V5,54:$V8,69:194,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,88],{97:$Vq}),o($Vp,[2,90]),o($Vp,[2,92]),{18:$V3,20:195,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{38:[1,196]},{26:$VW,38:[1,197]},{18:$V3,36:$V4,40:$V5,54:$V8,69:198,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($Vp,[2,105],{97:$Vq}),o($VT,[2,99]),{38:[1,199]},{36:[1,201],38:[2,126],108:200},{18:$V3,20:202,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VZ,[2,130],{66:$Vm}),o($V_,[2,24],{15:203,35:[1,204]}),{18:$V3,20:207,25:205,27:206,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($VU,[2,12],{66:$Vm}),o($VR,[2,40],{51:[1,208]}),{40:[1,210],57:209},o($Vp,[2,83]),o($Vp,[2,84]),o($Vp,[2,85]),o($Vp,[2,89],{97:$Vq}),o($VX,[2,94],{66:$Vm}),o($Vp,[2,91]),o($Vp,[2,93]),o($Vp,[2,106],{97:$Vq}),o($Vy,[2,123]),{38:[2,125]},{18:[1,211]},o($VZ,[2,129],{66:$Vm}),o($V_,[2,2]),{36:[1,212]},o($VY,[2,14],{26:[1,213]}),o($V$,[2,16]),o($V01,[2,18],{28:214,30:[1,215],31:[1,216],66:$Vm}),{18:$V3,20:217,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},{26:[1,219],38:[1,218]},o($VT,[2,52]),{38:[1,220]},{37:221,39:222,40:$V11},{18:$V3,20:207,27:224,36:$V4,40:$V5,54:$V8,65:14,67:15,69:16,71:$V9,72:$Va,96:19,98:20,101:21,104:22,105:25,106:$Vb,109:$Vc,116:$Vd,117:$Ve,118:$Vf,119:$Vg},o($V$,[2,21],{29:225,32:[1,226]}),o($V01,[2,19]),o($V01,[2,20]),o($VR,[2,41],{66:$Vm}),o($VV,[2,50]),{40:[1,227]},{38:[2,127]},{26:[1,229],38:[1,228]},o($VT,[2,27],{40:$V21}),o($V31,[2,29]),o($V$,[2,15]),o($V$,[2,17]),{33:[1,231],34:[1,232]},o($VT,[2,51]),o($V_,[2,25]),{39:233,40:$V11},o($V31,[2,28]),o($V$,[2,22]),o($V$,[2,23]),o($VT,[2,26],{40:$V21})],
defaultActions: {4:[2,1],131:[2,58],132:[2,59],133:[2,60],134:[2,61],164:[2,55],165:[2,57],200:[2,125],220:[2,127]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:return 54
break;
case 2:return 43
break;
case 3:/* skip whitespace */
break;
case 4:return 6
break;
case 5:return 17
break;
case 6:return 45
break;
case 7:return 19
break;
case 8:return 16
break;
case 9:return 95
break;
case 10:return 21
break;
case 11:return 23
break;
case 12:return 24
break;
case 13:return 26
break;
case 14:return 99
break;
case 15:return 100
break;
case 16:return 102
break;
case 17:return 42
break;
case 18:return 103
break;
case 19:return 74
break;
case 20:return 75
break;
case 21:return 76
break;
case 22:return 78
break;
case 23:return 77
break;
case 24:return 80
break;
case 25:return 79
break;
case 26:return 36
break;
case 27:return 38
break;
case 28:return 97
break;
case 29:return 55
break;
case 30:return 86
break;
case 31:return 87
break;
case 32:return 88
break;
case 33:return 71
break;
case 34:return 89
break;
case 35:return 90
break;
case 36:return 51
break;
case 37:return 68
break;
case 38:return 66
break;
case 39:return 72
break;
case 40:return 62
break;
case 41:return 59
break;
case 42:return 50
break;
case 43:return 58
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 64
break;
case 47:return 63
break;
case 48:return 109
break;
case 49:return 113
break;
case 50:return 114
break;
case 51:return 115
break;
case 52:return 112
break;
case 53:return 94
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 32
break;
case 57:return 33
break;
case 58:return 34
break;
case 59:return 35
break;
case 60:return 56
break;
case 61:return 106
break;
case 62:return 116
break;
case 63:return 118
break;
case 64:return 117
break;
case 65:return 18
break;
case 66:return 40
break;
case 67:return 119
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:TOP\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:OPTION\b)/i,/^(?:WITH\b)/i,/^(?:CAST\b)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[?])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();